<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zhangfane.github.io</id>
    <title>Gridea</title>
    <updated>2020-04-05T06:44:40.294Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zhangfane.github.io"/>
    <link rel="self" href="https://zhangfane.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://zhangfane.github.io/images/avatar.png</logo>
    <icon>https://zhangfane.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[玩玩Prometheus的NodeExporter]]></title>
        <id>https://zhangfane.github.io/post/wan-wan-prometheus-de-nodeexporter/</id>
        <link href="https://zhangfane.github.io/post/wan-wan-prometheus-de-nodeexporter/">
        </link>
        <updated>2020-04-05T06:35:23.000Z</updated>
        <content type="html"><![CDATA[<p>最近需要重写OracleExporter，研究研究NodeExporter的实现以寻找开发OracleExporter的最佳实践</p>
<h1 id="prometheus的collector">Prometheus的Collector</h1>
<p>prometheus提供一个Collector接口，其包含两个方法</p>
<pre><code class="language-golang">type Collector interface {
	Describe(chan&lt;- *Desc)
	Collect(chan&lt;- Metric)
}
</code></pre>
<ul>
<li>Describe：Describe方法用来注册prometheus.Collector创建的指标。</li>
<li>Collect：Collect方法用来执行采集任务，为指标赋值即可。</li>
</ul>
<p>构建Exporter时，创建prometheus.Collector的实例，调用这两个方法即可完成Exporter对target的采集。<br>
但如果把采集的逻辑全部都放在Collect方法里面，将导致采集逻辑大量堆砌，可读性将非常差，所以NodeExporter又定义了一个collector.Collector接口，将某一类的采集封装起来。<br>
那么此时，NodeExporter来说，它包含两个Collector</p>
<ul>
<li>prometheus.Collector</li>
<li>collector.Collector</li>
</ul>
<p>这两者都是用来做采集的，但是collector.Collector实例是真正执行采集指标的业务，而prometheus.Collector用来采集collector.Collector的采集信息，这句话听上去很绕，什么意思呢？NodeExporter的Describe中向prometheus传递了两个指标</p>
<ul>
<li>scrapeDuration: 记录collector.Collector实例采集任务执行的时间</li>
<li>scrapeSuccess: 记录collector.Collector实例采集任务执行状态（成功或失败)</li>
</ul>
<p>根据指标的描述，这就很好理解“prometheus.Collector用来采集collector.Collector的采集信息”这句话的含义了。下面是其代码逻辑的实现</p>
<h3 id="prometheuscollectorcollect">prometheus.Collector.Collect</h3>
<p>其核心逻辑是为每个collector.Collector实例创建一个goroutine来收集监控指标</p>
<pre><code class="language-golang">// Collect implements the prometheus.Collector interface.
func (n NodeCollector) Collect(ch chan&lt;- prometheus.Metric) {
	wg := sync.WaitGroup{}
	wg.Add(len(n.Collectors))
	for name, c := range n.Collectors {
		// 为每个Collector创建单独的goroutine
		go func(name string, c Collector) {
			execute(name, c, ch, n.logger)
			wg.Done()
		}(name, c)
	}
  // 等待所有的collector.Collector采集完毕
	wg.Wait()
}
</code></pre>
]]></content>
    </entry>
</feed>